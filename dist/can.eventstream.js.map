{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap 8bcd76c6709ae2885072","./src/index.js","external \"can\"*"],"names":[],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"can\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"can\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"can\")) : factory(root[\"can\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn ","\n// The module cache\nvar installedModules = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(installedModules[moduleId])\n\t\treturn installedModules[moduleId].exports;\n\t\n\t// Create a new module (and put it into the cache)\n\tvar module = installedModules[moduleId] = {\n\t\texports: {},\n\t\tid: moduleId,\n\t\tloaded: false\n\t};\n\t\n\t// Execute the module function\n\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\t\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = modules;\n\n// expose the module cache\n__webpack_require__.c = installedModules;\n\n// __webpack_public_path__\n__webpack_require__.p = \"\";\n\n\n// Load entry module and return exports\nreturn __webpack_require__(0);","module can from \"can\";\n\n/**\n * @function can.EventStream.isEventStream\n *\n * Must be implemented by a can.eventstream plugin.\n *\n * Returns a truthy value if `stream` is a compatible event stream.\n *\n * @param {EventStream} stream\n * @returns boolean\n */\n\n/**\n * @function can.EventStream.onValue\n *\n * Must be implemented by a can.eventstream plugin.\n *\n * Binds `callback` such that it will be called on `stream` values. Callback\n * invocation will follow the stream's semantics.\n *\n * @param {EventStream} stream\n * @param {Function(Any)} callback - Callback that receives a single event value\n *                                   whenever the stream 'fires'\n *\n * @returns Function() - Calling this function may be used to unbind the\n *                       listener.\n */\n\n/**\n * @function can.EventStream.bind\n *\n * Must be implemented by a can.eventstream plugin.\n *\n * Returns an event stream that will listen to events, using the given\n * parameters.\n *\n * @param context - The context to listen to events on. `can.bind` and\n *                        `can.delegate` may be used.\n * @param selector - Subselector to delegate on, if any.\n * @param event - Name of event to listen to.\n *\n * @returns EventStream\n */\n\n/**\n * @function can.EventStream.untilStream\n *\n * Must be implemented by a can.eventstream plugin.\n *\n * Returns an event stream that will return values until `until` receives a\n * value.\n *\n * @param {EventStream} stream - Stream to return values from.\n * @param {EventStream} until - Stream that will notify when returned stream\n *                              should stop piping data from `stream`\n *\n * @returns EventStream\n */\n\n/**\n * @function #getEventValueForStream\n */\n\nvar oldBind = can.bind;\n/**\n * @function can.bind\n *\n * Extends `can.bind()` such that if it's called with only one argument (the\n * event name), or without any arguments, an `EventStream` object is\n * created, instead of binding a callback to the event.\n *\n * The actual event values sent into the `EventStream` will vary depending on\n * the observed value.\n *\n * See http://canjs.com/docs/can.bind.html for documentation on the default\n * behavior.\n *\n * @param {Any} this - The object to bind events on.\n * @param {String} [event=\"change\"] - Name of event to hook up to\n * @param {Function} [callback] - Callback to invoke when event fires. If this\n *                                parameter is provided, the method will revert\n *                                to its default behavior.\n *\n * @returns EventStream | Any\n *\n * @example\n * can.bind.call(new can.Map(), \"change\")\n * // => Event stream of change events\n *\n */\ncan.bind = function(ev, cb) {\n  if (cb){\n    return oldBind.call(this, ev, cb);\n  } else {\n    return can.EventStream.bind(this, ev || \"change\");\n  }\n};\n\nvar oldDelegate = can.delegate;\n/**\n * @function can.delegate\n *\n * Extends `can.delegate()` such that if it's called with only one or two\n * arguments (the selector, and the event name), an `EventStream` object is\n * created, instead of binding a callback to the event.\n *\n * The actual event values sent into the `EventStream` will vary depending on\n * the observed value.\n *\n * See http://canjs.com/docs/can.delegate.html for documentation on the default\n * behavior.\n *\n * @param {Any} this - The object to bind events on.\n * @param {Any} selector - The selector to delegate to.\n * @param {String} [event=\"change\"] - Name of event to hook up to.\n * @param {Function} [callback] - Callback to invoke when event fires. If this\n *                                parameter is provided, the method will revert\n *                                to its default behavior.\n *\n * @returns EventStream | Any\n *\n * @example\n * can.delegate.call(window, \"a\", \"click\")\n * // => Event stream of click events on <a> elements.\n *\n */\ncan.delegate = function(selector, ev, cb) {\n  if (cb) {\n    return oldDelegate.apply(this, arguments);\n  } else {\n    return can.EventStream.bind(this, ev || \"change\", selector);\n  }\n};\n\n/**\n * @function can.compute#bind\n *\n * Extends the default CanJS behavior of the `can.compute#bind()` method so that\n * it returns an `EventStream` of new `can.compute` values, if no `callback` is\n * provided to the `.bind()` call. If the `callback` is present, this method\n * reverts to the standard behavior of binding an event listener directly.\n *\n * @param {String} [event=\"change\"] - Name of event to hook up to\n * @param {Function} [callback] - Callback to invoke when event fires. If this\n *                                parameter is provided, the method will revert\n *                                to its default behavior.\n *\n * @returns EventStream | Computed\n *\n * @example\n * var compute = can.compute(1);\n * compute.bind().log(\"compute changed\");\n * compute(2);\n * // compute changed 2\n */\n\n\nvar oldBindAndSetup = can.bindAndSetup;\n// Mostly internal, but used to replace the `.bind()` behavior for all\n// Observables in Can.\ncan.bindAndSetup = function(ev, cb) {\n  return cb ?\n    oldBindAndSetup.apply(this, arguments) :\n    can.bind.call(this, ev);\n};\n\nvar oldControlOn = can.Control.prototype.on;\n/**\n * @function can.Control#on\n *\n * Enhances `can.Control#on` (and by extension, `can.Component#events#on`) so it\n * can be used to listen to event streams in a memory-safe way, according to the\n * control/component's lifecycle. The behavior of this method changes *only* if\n * `can.EventStream.isEventStream` returns true for the first argument, in which\n * case, all other arguments are ignored.\n *\n * See http://canjs.com/docs/can.Control.prototype.on.html\n *\n *\n * @param {Any} [context=this.element] - The object to listen for events on. If\n *                                       this object is an `EventStream`, this\n *                                       method will immediately return a stream\n *                                       that ends automatically if the `this`\n *                                       (the Control or Component) is\n *                                       destroyed.\n * @param {String} [selector] - If provided, the selector to delegate to.\n * @param {String} [event=\"change\"] - The name of the event to listen to.\n * @param {Function} [callback] - Callback to invoke when event fires. If this\n *                                parameter is provided, the method will revert\n *                                to its default behavior.\n *\n * @returns EventStream | Observable | Number\n *\n * @example\n * ...\n * events: {\n *   inserted: function() {\n *     this.on(GlobalStreams.specialEvent)\n *       .onValue((e) => console.log(\"special event: \", e);\n *   }\n * }\n * ...\n * $(\"mycomponent\").remove();\n * GlobalStreams.specialEvent.push(\"whatever\"); // Nothing happens\n *\n * // The following are also equivalent:\n * this.on(scope, \"change\");\n * this.on(scope);\n *\n */\ncan.Control.prototype.on = function(ctx, selector, eventName, func) {\n  if (!ctx) {\n    return oldControlOn.apply(this, arguments);\n  }\n  if (can.EventStream.isEventStream(ctx)) {\n    return can.EventStream.untilStream(ctx, can.bind.call(this, \"destroyed\"));\n  } else {\n    return oldControlOn.apply(this, arguments);\n  }\n};\n\n/**\n * @function can.Map#bind\n *\n * Replaces the default CanJS behavior of the `can.Map#bind()` method with one\n * that returns an `EventStream` of event objects or values if the `callback`\n * argument is not provided.\n *\n * The values in `EventStream` vary depending on the event being listened to.\n *\n * For named property events, the new value of the property is returned, as-is.\n *\n * For `\"change\"` events, `MapChangeEvent` objects are returned, with the\n * following properties:\n *\n * {\n *   event: Object // The CanJS event object.\n *   which: String // They attr/key affected by the event,\n *   how: \"add\"|\"remove\"|\"set\" // The type of operation,\n *   value: Any // For \"add\"/\"set\" events, the new value. For \"remove\" events,\n *                 the removed value.\n * }\n *\n * Note that this object fits the API required for `can.toCanMap`, so the\n * `EventStream` returned by this function can be piped into a different\n * `can.Map` to partially or fully synchronise both maps.\n *\n * Additionally, The events from that `Map` changing can then be piped back into\n * the original `Map` without causing circularity issues, achieving two-way\n * binding between both objects. See example.\n *\n * @param {String} [event=\"change\"] - Name of event to hook up to\n * @param {Function} [callback] - Callback to invoke when event fires. If this\n *                                parameter is provided, the method will revert\n *                                to its default behavior.\n *\n * @returns EventStream | `this`\n *\n * @example\n * // Binding\n * var map = new can.Map({x:1});\n * map.bind().log(\"map changed:\");\n * map.bind(\"x\").log(\"x property changed:\");\n * map.attr(\"x\", 2);\n * // map changed: {event: Object, which: \"x\", \"how\": \"set\", value: 2}\n * // x property changed: 2\n *\n * // Piping into a different Map\n * var map1 = new can.Map();\n * var map2 = map1.bind().toCanMap(new can.Map());\n * map1.bind().log(\"map1 changed:\");\n * map2.bind().log(\"map2 changed:\");\n *\n * map1.attr(\"x\", 1);\n * // map2 changed: {event: Object, which: \"x\", \"how\": \"add\", value:1}\n * // map1 changed: {event: Object, which: \"x\", \"how\": \"add\", value:1}\n * map2.attr(\"x\", 2);\n * // map1 changed: {event: Object, which: \"x\", \"how\": \"set\", value:2}\n * // map2 changed: {event: Object, which: \"x\", \"how\": \"set\", value:2}\n * console.log(map1.attr(), map2.attr());\n * // {x:2}, {x:2}\n */\ncan.Map.bind = can.Map.on = can.bindAndSetup;\nvar oldCanMapBind = can.Map.prototype.bind;\ncan.Map.prototype.bind = function(ev=\"change\", cb) {\n  return oldCanMapBind.call(this, ev, cb);\n};\ncan.Map.prototype.getEventValueForStream = function(args) {\n  switch (args[0] && args[0].type) {\n  case \"change\":\n    return new MapChangeEvent(args);\n  default:\n    var target = args[0].target;\n    if (target._data && target._data.hasOwnProperty(args[0].type)) {\n      // We found a named property change event, not a generic custom event\n      // (maybe, probably)\n      return args[1];\n    } else {\n      // If we don't know what the event is, return the arguments as-is\n      return args;\n    }\n  }\n};\n\nfunction MapChangeEvent(args) {\n  this.event = args[0];\n  this.which = args[1];\n  this.how = args[2];\n  this.value = args[3];\n  // This isn't documented because I want to pretend it doesn't exist :)\n  this.oldValue = args[4];\n}\n\n/**\n * @function can.List#bind\n *\n * Replaces the default CanJS behavior of the `can.List#bind()` method with one\n * that returns an `EventStream` of event objects or values if the `callback`\n * argument is not provided.\n *\n * The values in `EventStream` vary depending on the event being listened to.\n *\n * For named property events, the new value of the property is returned,\n * as-is. Both numerical properties (indices) and regular Map attrs can be\n * bound to.\n *\n * For the `\"length\"` events, the new length of the array is returned as-is.\n *\n * The rest of the events, namely `\"change\"`, `\"add\"`, `\"remove\"`, and `\"set\"`,\n * either `ListChangeEvent` or `MapChangeEvent` objects are returned from the\n * stream, depending on whether the modification involves a numerical key.\n\n * For events on numerical properties, `ListChangeEvent` objects are returned,\n * with the following properties:\n *\n * {\n *   event: Object // The CanJS event object.\n *   index: Integer // They initial index of the change.\n *   how: \"add\"|\"remove\"|\"set\" // The type of operation,\n *   value: Array | Any // For \"add\" events, an array of added items.\n *                         For \"remove\" events, an array of removed items.\n *                         For \"set\", the single new value.\n * }\n *\n * For events on non-numerical properties, `MapChangeEvent` objects are\n * returned, using the same structure as `can.Map#bind()`:\n *\n * {\n *   event: Object // The CanJS event object.\n *   which: String // They attr/key affected by the event,\n *   how: \"add\"|\"remove\"|\"set\" // The type of operation,\n *   value: Array // For \"add\"/\"set\" events, the new values. For \"remove\" events,\n *                // the removed values.\n * }\n *\n * Note that these objects conform to the API required for `Bacon.toCanList` and\n * `Bacon.toCanMap` respectively, so the `EventStream` returned by this function\n * can be piped into a different `can.List` or `can.Map` to synchronise both.\n *\n * Unlike the stream returned by `can.Map#bind()`, this one cannot be used for\n * two-way binding out of the box, since `add` events will bounce back and forth\n * infinitely and cause an overflow. One-way binding works fine, though, and can\n * easily handle lists of different lengths.\n *\n * @param {String} [event=\"change\"] - Name of event to hook up to\n * @param {Function} [callback] - Callback to invoke when event fires. If this\n *                                parameter is provided, the method will revert\n *                                to its default (non-`can.bacon`) behavior.\n *\n * @returns EventStream | `this`\n *\n */\ncan.List.prototype.getEventValueForStream = function(args) {\n  switch (args[0] && args[0].type) {\n  case \"change\":\n  case \"set\":\n  case \"add\":\n  case \"remove\":\n    return new ListChangeEvent(args);\n  case \"length\":\n    return args[1];\n  default:\n    // This is different from the can.Map version because can.Lists don't have\n    // the _data property.\n    var target = args[0].target;\n    var _type = args[0].type;\n    if (target.hasOwnProperty(args[0].type)) {\n      // We found a named property change event, not a generic custom event\n      // (maybe, probably).\n      // TODO - change the semantics here to check for integers. Floats should\n      // be treated as string keys.\n      return isNaN(_type) ? args[1] : args[1][0];\n    } else {\n      // If we don't know what the event is, return the arguments as-is\n      return args;\n    }\n  }\n};\n\nfunction ListChangeEvent(args) {\n  this.event = args[0];\n  switch (this.event.type) {\n  case \"change\":\n    // NOTE: This gets a string as the index for all change events.\n    this.index = isNaN(args[1])?args[1]:+args[1];\n    this.how = args[2];\n    // We take the liberty of changing these semantics for remove events. Aside\n    // from it being generally more convenient for filtering, this means that,\n    // aside from `this.oldValue` being weird, binding to \"change\" and filtering\n    // on `how` will give exactly equivalent results to just binding directly on\n    // the specific event type.\n    //\n    // NOTE: when you `can.List#pop()` on an empty array, you get\n    // `[undefined]` as the value, whereas splicing an empty array gets you\n    // `[]` as the value.\n    // See https://github.com/bitovi/canjs/issues/998\n    this.value = this.how === \"remove\" ? args[4] : args[3];\n    // This is only ever of interest for set events (we never spit out\n    // ListChangeEvent for length events)\n    this.oldValue = args[4];\n    break;\n  case \"set\":\n  case \"add\":\n  case \"remove\":\n    this.index = args[2];\n    this.how = this.event.type;\n    // NOTE: The docs say that this can be either one, or many things. I can\n    // only seem to get arrays out of this event, though.\n    this.value = args[1];\n    // NOTE: These events do not include oldValue.\n    this.oldValue = null;\n    break;\n  default:\n    throw new Error(\"Unexpected can.List event: \"+this.event.type);\n  }\n}\n\n/**\n * Returns a `can.compute` whose value changes whenever `stream` has a new value\n * If a compute is provided, it will be used instead of creating a new one.\n */\ncan.bindComputeFromStream = function(stream, compute=can.compute()) {\n  can.EventStream.onValue(stream, compute);\n  return compute;\n};\n\n/**\n * Returns a `can.Map` whose value is managed by a stream of incoming map change\n * events.\n *\n * If `map` is provided, it *must* be a `can.Map` instance (or an instance of a\n * subclass), which will be used instead of creating a new empty `can.Map`.\n *\n * Two kinds of event objects are accepted:\n *\n * @example\n * // Modification event. Modifies a single key.\n * {\n *   how: \"set\"|\"add\"|\"remove\", // The type of operation.\n *   which: String, // The key to modify.\n *   value: Any, // The value to set. Optional for `remove`.\n * }\n *\n * // Replacement event. Uses `.attr()` to replace multiple keys.\n * {\n *   how: \"replace\", // Must be this string.\n *   value: Object, // Object to replace with.\n *   removeOthers: Boolean // Passed to `.attr()`. See http://canjs.com/docs/can.Map.prototype.attr.html#sig_map_attr_obj__removeOthers__\n * }\n */\ncan.bindMapFromStream = function(stream, map=new can.Map()) {\n  can.EventStream.onValue(stream, (ev) => syncAsMap(map, ev));\n  return map;\n};\n\n/**\n * Returns a `can.List` whose value is managed by a stream of incoming list\n * and/or map change events.\n *\n * If `list` is provided, it *must* be a `can.List` instance, which will be used\n * instead of creating a new empty instance.\n *\n * Three kinds of event objects are accepted:\n *\n * @example\n * // Modification event. Modifies a single index or key.\n * {\n *   how: \"set\"|\"add\"|\"remove\", // The type of operation.\n *   which|index: String|Integer, // The key to modify.\n *   value: Array-like, // The value to set. For \"add\" on an Integer index, must be an\n *                      // Array-like. Optional for `remove`.\n * }\n *\n * // Replacement event. Calls `.replace()`\n * {\n *   how: \"replace\", // Must be this string.\n *   value: Array-like, // Array-like to replace contents with.\n *   removeOthers: Boolean=true (optional) // Whether to keep trailing elements\n *                                            after value has been applied. If\n *                                            this argument is provided, the\n *                                            list will be replaced using\n *                                            `.attr()`. Otherwise, `.replace()`\n *                                            will be used. See:\n *                                            http://canjs.com/docs/can.List.prototype.attr.html#sig_list_attr_elements__replaceCompletely__\n * }\n */\ncan.bindListFromStream = function(stream, list=new can.List()) {\n  can.EventStream.onValue(stream, (ev) => syncAsList(list, ev));\n  return list;\n};\n\nfunction syncAsMap(map, val) {\n  var key = val.hasOwnProperty(\"which\") ? val.which : val.index;\n  switch (val.how) {\n  case \"set\":\n    map.attr(key, val.value);\n    break;\n  case \"add\":\n    map.attr(key, val.value);\n    break;\n  case \"remove\":\n    map.removeAttr(key);\n    break;\n  case \"replace\":\n    map.attr(val.value, val.removeOthers);\n    break;\n  case undefined:\n    console.warn(\"Missing event type on change event: \", val);\n    map.attr(val);\n    break;\n  default:\n    console.warn(\"Unexpected event type: \", val.how);\n    // idk you're giving it to me so I'll shove it in. It's your own fault\n    // if it breaks. You voided the warranty. Be thankful for the log :)\n    map.attr(val);\n  }\n}\n\nfunction syncAsList(list, event) {\n  var isMapEvent = event.hasOwnProperty(\"which\") || isNaN(event.index);\n  if (isMapEvent && event.how !== \"replace\") {\n    syncAsMap(list, event);\n  } else {\n    switch (event.how) {\n    case \"set\":\n      list.attr(event.index, event.value);\n      break;\n    case \"add\":\n      // TODO - tag lists and/or events with some magical number (like.. a\n      // batchnum-style thing) to prevent circular additions when two-way\n      // binding. Please name it: \"___PRAISE_THE_SUN___\"\n      if (!event.value || !event.value.length) {\n        console.warn(\"'add' events sent to lists must have an array-like as their value\");\n      }\n      list.splice.apply(list, [event.index, 0].concat([event.value]));\n      break;\n    case \"remove\":\n      list.splice(event.index,\n                  event.value ? event.value.length : 1);\n      // list.splice(Math.min(val.index, !list.length?0:list.length-1),\n      //             event.value ? event.value.length : 1);\n      break;\n    case \"replace\":\n      if (event.hasOwnProperty(\"removeOthers\")) {\n        list.attr(event.value, event.removeOthers);\n      } else {\n        list.replace(event.value);\n      }\n      break;\n    case \"splice\":\n      list.splice.apply(list, [event.index, event.howMany].concat(event.value));\n      break;\n    case undefined:\n      console.warn(\"Missing event type on change event: \", event);\n      list.replace(event.value);\n      break;\n    default:\n      console.warn(\"Unexpected event type: \", event.how);\n      // idk you're giving it to me so I'll shove it in. It's your own fault\n      // if it breaks. You voided the warranty. Be thankful for the log :)\n      list.replace(event.value);\n    }\n  }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;"],"sourceRoot":"webpack-module://"}